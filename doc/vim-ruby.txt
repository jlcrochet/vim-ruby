*vim-ruby.txt*		Improved syntax highlighting and indentation for Ruby
*vim-ruby*

==============================================================================
Contents					*vim-ruby-help*

	Introduction				|vim-help-introduction|
	Configuration				|vim-help-configuration|
	  g:ruby_simple_indent			|g:ruby_simple_indent|
	  g:ruby_fold				|g:ruby_fold|
	  g:eruby_extensions			|g:eruby_extensions|
	  g:eruby_default_subtype		|g:eruby_default_subtype|

==============================================================================
Introduction					*vim-ruby-introduction*

This plugin provides syntax highlighting and indentation for Ruby (`*.rb`),
eRuby (`*.erb`), and Ruby Signature (`*.rbs`) files. It is intended to be a
drop-in replacement for the default scripts provided by Vim. Emphasis was
placed on providing (much) better performance and also handling some edge
cases that the default scripts don't handle properly.

==============================================================================
Configuration					*vim-ruby-configuration*

------------------------------------------------------------------------------
g:ruby_simple_indent				*g:ruby_simple_indent*

Values:
	`0`: Floating indentation
	`1`: Simple indentation

Default: `0`

The default indentation style used by this plugin is the one most commonly
found in the Ruby community, which allows for "hanging" or "floating"
indentation. Some examples:

>
	x = if y
	      5
	    else
	      10
	    end

	x = begin
	      h["foo"]
	    rescue KeyError
	      "Not Found"
	    end

	x = case y
	    when :foo
	      5
	    when :bar
	      10
	    else
	      1
	    end

	x = [:foo, :bar,
	     :baz, :qux]

	x = 5 + 10 +
	    15 + 20 -
	    5 * 3

	x = y.foo
	     .bar
	     .baz
<

For those who prefer a more traditional indentation style or who desire
slightly faster highlighting and indentation, set this variable to `1`. The
above examples will now be indented thus:

>
	x = if y
	  5
	else
	  10
	end

	x = begin
	  h["foo"]
	rescue KeyError
	  "Not Found"
	end

	x = case y
	when :foo
	  5
	when :bar
	  10
	else
	  1
	end

	x = [:foo, :bar,
	  :baz, :qux]

	# OR

	x = [
	  :foo, :bar,
	  :baz, :qux
	]

	x = 5 + 10 +
	  15 + 20 -
	  5 * 3

	# OR

	x =
	  5 + 10 +
	  15 + 20 -
	  5 * 3

	x = y.foo
	  .bar
	  .baz

	# OR

	x = y
	  .foo
	  .bar
	  .baz
<

------------------------------------------------------------------------------
g:ruby_fold					*g:ruby_fold*

Values:
	`0`: No folding
	`1`: Folding

Default: `0`

If `1`, definition blocks (`module`, `class`, `def`) will be folded.

NOTE: If this is set, |g:ruby_simple_indent| will be disabled, since floating
blocks have to be matched in order for folding to work properly.

------------------------------------------------------------------------------
g:eruby_extensions				*g:eruby_extensions*

Default: `{}`

A dictionary of filetype extensions is used to determine which filetype to use
when loading ERB files. For example, opening a file named `foo.html.erb` will
load HTML as the filetype with ERB syntax added on top.

The default recognized extensions are as follows:

>
	.html => html
	.turbo_stream => html
	.js => javascript
	.json => json
	.xml => xml
	.yml => yaml
	.txt => text
	.md => markdown
<

Each extension maps to the name of the filetype that you want to load for that
extension.

To add or overwrite entries in the dictionary, set this variable to a
dictionary with the entries that you want to inject. For example, the
following would allow the plugin to recognize `*.js` files as JSX instead of
JavaScript:

>
	let g:eruby_extensions = #{ js: "javascriptreact" }
<

If no subtype is specified in the file name itself (e.g., `foo.erb`), the
value of |g:eruby_default_subtype| is used as the subtype.

------------------------------------------------------------------------------
g:eruby_default_subtype				*g:eruby_default_subtype*

Default: `html`

Determines the default subtype to use for ERB files when no subtype is
specified in the file name itself (e.g., `foo.erb`).

The default value is `html`. Setting this to nothing (`let
g:eruby_default_subtype = ""`) will cause no subtype to be used.

==============================================================================
vim:filetype=help
